    MENU 
Start: 
End: 1:52:09

=> Unique values ES6 


==========
App.js
==========

import React, { useState } from "react";
import Menu from "./Menu";
import Categories from "./Categories";
import items from "./data";
const allCategories = ["all", ...new Set(items.map((item) => item.category))];

function App() {
  const [menuItems, setMenuItems] = useState(items);
  const [categories, setCategories] = useState(allCategories);

  const filterItems = (category) => {
    if (category === "all") {
      setMenuItems(items);
      return;
    }
    const newItems = items.filter((item) => item.category === category);
    setMenuItems(newItems);
  };

  return (
    <main>
      <section className="menu section">
        <div className="title">
          <h2>our menu</h2>
          <div className="underline"></div>
        </div>
        <Categories categories={categories} filterItems={filterItems} />
        <Menu items={menuItems} />
      </section>
    </main>
  );
}

export default App;




1.
const allCategories = ["all", ...new Set(items.map((item) => item.category))];

- This line of code creates an array called "allCategories".
- It Includes all unique categories form the "item" data array, 
along with an "all" category.
- This "all" category is used to show all menu items when 
selected

2.
const filterItems = (category) => {
  if (category === "all") {
    setMenuItems(items);
    return;
  }
  const newItems = items.filter((item) => item.category === category);
  setMenuItems(newItems);
};

- "filterItems" is a function that takes a "category" as an agument and 
filters the menu items accordingly. 
- If the selected category is "all": it sets "menuItems" to the full list 
of the items effectively displaying all menu items. 
- If a specific category is selected: It filters "items" to include only 
those that match the selected category and updates "menuItems" with the  
filtered items.

3.
<Categories categories={categories} filterItems={filterItems} />
        <Menu items={menuItems} /> 

- It contains a title, alist of categories (rendered using the  
"Categories" component), and a menu of items (rendered using the "Menu"
 component).
- "filterItems" function is passed as a props to the "Categories" component,
enabling category-based filtering.



==========
Menu.js
==========

import React from "react";

const Menu = ({ items }) => {
  return (
    <div className="section-center">
      {items.map((menuItem) => {
        const { id, title, img, desc, price } = menuItem;
        return (
          <article key={id} className="menu-item">
            <img src={img} alt={title} className="photo" />
            <div className="item-info">
              <header>
                <h4>{title}</h4>
                <h4 className="price">${price}</h4>
              </header>
              <p className="item-text">{desc}</p>
            </div>
          </article>
        );
      })}
    </div>
  );
};

export default Menu;


1.
const Menu = ({ items }) => {}

- it declares  a function component called "Menu". 
- it takes a single props "items" which is an array of menu 
items to be displayed. 

2.
{items.map((menuItem) => {
      // Destructuring assignment to extract properties from each menuItem
      const { id, title, img, desc, price } = menuItem;
      return (
        <div></div>
      ) } )}

- The JSX code represents the component's rendering logic
- "items" prop, which is an array of menu items, is mapped over using 
the "map" function.
-For each "menuitem" in the arryay, a corresponging JSX element is  
generated.

-> inside the loop, desructuring assignment is used to extract properties 
from each "menuItem" including  id, title, img, desc, and price. 

-> an <article> element is created for eachmenu item with a unique 
"key" attribute set to "id". T
-The "key" is efficiently update and render lists of items

==========
Categories.js 
==========

import React from "react";

const Categories = ({ categories, filterItems }) => {
  return (
    <div className="btn-container">
      {categories.map((category, index) => {
        return (
          <button
            type="button"
            className="filter-btn"
            key={index}
            onClick={() => filterItems(category)}
          >
            {category}
          </button>
        );
      })}
    </div>
  );
};

export default Categories;


1.
 const Categories = ({ categories, filterItems }) => {} 

 -It delcares a functional component called "Categories".
 -It takes two props 
 categories-> an array of category names that will be used to generate 
 the category buttons. 
 filterItems-> A function that will be called when a category button 
 is clicked, typically used to fileter items based on the selected category.


2. 
return (
  <div className="btn-container">
    {categories.map((category, index) => {
      return (
        <button
          type="button"
          className="filter-btn"
          key={index}
          onClick={() => filterItems(category)}
        >
          {category}
        </button>
      );
    })}
  </div>
);

- Inside the <div> the component mpas over the "category' in the  
"categories" array 

-> a "<button>"element is created. 
-the "key" attribute is set to "index" to provide a unique 
identifier for each button. 
- "onclick" event handler is set to call the "filteritems" function with 
the "category" as a argument when the button is clicked. 
=> this is how the category buttons trigger filtering of menu items based on 
the selected category.

- The text content of each button is set to "category" name, which will be 
displayed as the button label.


